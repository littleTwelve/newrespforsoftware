#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace StudentGradeManagementSystem
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="StudentGradeMSDB3")]
	public partial class DBcontrolDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertGrade集(Grade集 instance);
    partial void UpdateGrade集(Grade集 instance);
    partial void DeleteGrade集(Grade集 instance);
    partial void InsertStudent集(Student集 instance);
    partial void UpdateStudent集(Student集 instance);
    partial void DeleteStudent集(Student集 instance);
    partial void InsertSubject集(Subject集 instance);
    partial void UpdateSubject集(Subject集 instance);
    partial void DeleteSubject集(Subject集 instance);
    #endregion
		
		public DBcontrolDataContext() : 
				base(global::StudentGradeManagementSystem.Properties.Settings.Default.StudentGradeMSDB3ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontrolDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontrolDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontrolDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBcontrolDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Grade集> Grade集
		{
			get
			{
				return this.GetTable<Grade集>();
			}
		}
		
		public System.Data.Linq.Table<Student集> Student集
		{
			get
			{
				return this.GetTable<Student集>();
			}
		}
		
		public System.Data.Linq.Table<Subject集> Subject集
		{
			get
			{
				return this.GetTable<Subject集>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Grade集")]
	public partial class Grade集 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _score;
		
		private int _Student_studentID;
		
		private int _Subject_subjectID;
		
		private EntityRef<Student集> _Student集;
		
		private EntityRef<Subject集> _Subject集;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnscoreChanging(int value);
    partial void OnscoreChanged();
    partial void OnStudent_studentIDChanging(int value);
    partial void OnStudent_studentIDChanged();
    partial void OnSubject_subjectIDChanging(int value);
    partial void OnSubject_subjectIDChanged();
    #endregion
		
		public Grade集()
		{
			this._Student集 = default(EntityRef<Student集>);
			this._Subject集 = default(EntityRef<Subject集>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_score", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int score
		{
			get
			{
				return this._score;
			}
			set
			{
				if ((this._score != value))
				{
					this.OnscoreChanging(value);
					this.SendPropertyChanging();
					this._score = value;
					this.SendPropertyChanged("score");
					this.OnscoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Student_studentID", DbType="Int NOT NULL")]
		public int Student_studentID
		{
			get
			{
				return this._Student_studentID;
			}
			set
			{
				if ((this._Student_studentID != value))
				{
					if (this._Student集.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStudent_studentIDChanging(value);
					this.SendPropertyChanging();
					this._Student_studentID = value;
					this.SendPropertyChanged("Student_studentID");
					this.OnStudent_studentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Subject_subjectID", DbType="Int NOT NULL")]
		public int Subject_subjectID
		{
			get
			{
				return this._Subject_subjectID;
			}
			set
			{
				if ((this._Subject_subjectID != value))
				{
					if (this._Subject集.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubject_subjectIDChanging(value);
					this.SendPropertyChanging();
					this._Subject_subjectID = value;
					this.SendPropertyChanged("Subject_subjectID");
					this.OnSubject_subjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student集_Grade集", Storage="_Student集", ThisKey="Student_studentID", OtherKey="studentID", IsForeignKey=true)]
		public Student集 Student集
		{
			get
			{
				return this._Student集.Entity;
			}
			set
			{
				Student集 previousValue = this._Student集.Entity;
				if (((previousValue != value) 
							|| (this._Student集.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Student集.Entity = null;
						previousValue.Grade集.Remove(this);
					}
					this._Student集.Entity = value;
					if ((value != null))
					{
						value.Grade集.Add(this);
						this._Student_studentID = value.studentID;
					}
					else
					{
						this._Student_studentID = default(int);
					}
					this.SendPropertyChanged("Student集");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject集_Grade集", Storage="_Subject集", ThisKey="Subject_subjectID", OtherKey="subjectID", IsForeignKey=true)]
		public Subject集 Subject集
		{
			get
			{
				return this._Subject集.Entity;
			}
			set
			{
				Subject集 previousValue = this._Subject集.Entity;
				if (((previousValue != value) 
							|| (this._Subject集.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subject集.Entity = null;
						previousValue.Grade集.Remove(this);
					}
					this._Subject集.Entity = value;
					if ((value != null))
					{
						value.Grade集.Add(this);
						this._Subject_subjectID = value.subjectID;
					}
					else
					{
						this._Subject_subjectID = default(int);
					}
					this.SendPropertyChanged("Subject集");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Student集")]
	public partial class Student集 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _studentID;
		
		private string _studentName;
		
		private string _password;
		
		private EntitySet<Grade集> _Grade集;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnstudentIDChanging(int value);
    partial void OnstudentIDChanged();
    partial void OnstudentNameChanging(string value);
    partial void OnstudentNameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public Student集()
		{
			this._Grade集 = new EntitySet<Grade集>(new Action<Grade集>(this.attach_Grade集), new Action<Grade集>(this.detach_Grade集));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int studentID
		{
			get
			{
				return this._studentID;
			}
			set
			{
				if ((this._studentID != value))
				{
					this.OnstudentIDChanging(value);
					this.SendPropertyChanging();
					this._studentID = value;
					this.SendPropertyChanged("studentID");
					this.OnstudentIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_studentName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string studentName
		{
			get
			{
				return this._studentName;
			}
			set
			{
				if ((this._studentName != value))
				{
					this.OnstudentNameChanging(value);
					this.SendPropertyChanging();
					this._studentName = value;
					this.SendPropertyChanged("studentName");
					this.OnstudentNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student集_Grade集", Storage="_Grade集", ThisKey="studentID", OtherKey="Student_studentID")]
		public EntitySet<Grade集> Grade集
		{
			get
			{
				return this._Grade集;
			}
			set
			{
				this._Grade集.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grade集(Grade集 entity)
		{
			this.SendPropertyChanging();
			entity.Student集 = this;
		}
		
		private void detach_Grade集(Grade集 entity)
		{
			this.SendPropertyChanging();
			entity.Student集 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subject集")]
	public partial class Subject集 : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _subjectID;
		
		private string _subjectName;
		
		private string _subjectType;
		
		private int _credit;
		
		private EntitySet<Grade集> _Grade集;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsubjectIDChanging(int value);
    partial void OnsubjectIDChanged();
    partial void OnsubjectNameChanging(string value);
    partial void OnsubjectNameChanged();
    partial void OnsubjectTypeChanging(string value);
    partial void OnsubjectTypeChanged();
    partial void OncreditChanging(int value);
    partial void OncreditChanged();
    #endregion
		
		public Subject集()
		{
			this._Grade集 = new EntitySet<Grade集>(new Action<Grade集>(this.attach_Grade集), new Action<Grade集>(this.detach_Grade集));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int subjectID
		{
			get
			{
				return this._subjectID;
			}
			set
			{
				if ((this._subjectID != value))
				{
					this.OnsubjectIDChanging(value);
					this.SendPropertyChanging();
					this._subjectID = value;
					this.SendPropertyChanged("subjectID");
					this.OnsubjectIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string subjectName
		{
			get
			{
				return this._subjectName;
			}
			set
			{
				if ((this._subjectName != value))
				{
					this.OnsubjectNameChanging(value);
					this.SendPropertyChanging();
					this._subjectName = value;
					this.SendPropertyChanged("subjectName");
					this.OnsubjectNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subjectType", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string subjectType
		{
			get
			{
				return this._subjectType;
			}
			set
			{
				if ((this._subjectType != value))
				{
					this.OnsubjectTypeChanging(value);
					this.SendPropertyChanging();
					this._subjectType = value;
					this.SendPropertyChanged("subjectType");
					this.OnsubjectTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_credit", DbType="Int NOT NULL")]
		public int credit
		{
			get
			{
				return this._credit;
			}
			set
			{
				if ((this._credit != value))
				{
					this.OncreditChanging(value);
					this.SendPropertyChanging();
					this._credit = value;
					this.SendPropertyChanged("credit");
					this.OncreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject集_Grade集", Storage="_Grade集", ThisKey="subjectID", OtherKey="Subject_subjectID")]
		public EntitySet<Grade集> Grade集
		{
			get
			{
				return this._Grade集;
			}
			set
			{
				this._Grade集.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Grade集(Grade集 entity)
		{
			this.SendPropertyChanging();
			entity.Subject集 = this;
		}
		
		private void detach_Grade集(Grade集 entity)
		{
			this.SendPropertyChanging();
			entity.Subject集 = null;
		}
	}
}
#pragma warning restore 1591
